// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echoWave.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "echoWave.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* echoWave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  echoWave_reflection_ = NULL;
struct echoWaveOneofInstance {
  const ::echoWaveRequest* request_;
  const ::echoWaveResponse* response_;
}* echoWave_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* echoWaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  echoWaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* echoWaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  echoWaveResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_echoWave_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_echoWave_2eproto() {
  protobuf_AddDesc_echoWave_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "echoWave.proto");
  GOOGLE_CHECK(file != NULL);
  echoWave_descriptor_ = file->message_type(0);
  static const int echoWave_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(echoWave_default_oneof_instance_, request_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(echoWave_default_oneof_instance_, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWave, message_),
  };
  echoWave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      echoWave_descriptor_,
      echoWave::default_instance_,
      echoWave_offsets_,
      -1,
      -1,
      -1,
      echoWave_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWave, _oneof_case_[0]),
      sizeof(echoWave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWave, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWave, _is_default_instance_));
  echoWaveRequest_descriptor_ = file->message_type(1);
  static const int echoWaveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveRequest, wave_),
  };
  echoWaveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      echoWaveRequest_descriptor_,
      echoWaveRequest::default_instance_,
      echoWaveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(echoWaveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveRequest, _is_default_instance_));
  echoWaveResponse_descriptor_ = file->message_type(2);
  static const int echoWaveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveResponse, echo_),
  };
  echoWaveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      echoWaveResponse_descriptor_,
      echoWaveResponse::default_instance_,
      echoWaveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(echoWaveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(echoWaveResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_echoWave_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      echoWave_descriptor_, &echoWave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      echoWaveRequest_descriptor_, &echoWaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      echoWaveResponse_descriptor_, &echoWaveResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_echoWave_2eproto() {
  delete echoWave::default_instance_;
  delete echoWave_default_oneof_instance_;
  delete echoWave_reflection_;
  delete echoWaveRequest::default_instance_;
  delete echoWaveRequest_reflection_;
  delete echoWaveResponse::default_instance_;
  delete echoWaveResponse_reflection_;
}

void protobuf_AddDesc_echoWave_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_echoWave_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016echoWave.proto\"a\n\010echoWave\022#\n\007request\030"
    "\001 \001(\0132\020.echoWaveRequestH\000\022%\n\010response\030\002 "
    "\001(\0132\021.echoWaveResponseH\000B\t\n\007message\"\037\n\017e"
    "choWaveRequest\022\014\n\004wave\030\001 \001(\t\"0\n\020echoWave"
    "Response\022\016\n\006status\030\001 \001(\010\022\014\n\004echo\030\002 \001(\tb\006"
    "proto3", 206);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "echoWave.proto", &protobuf_RegisterTypes);
  echoWave::default_instance_ = new echoWave();
  echoWave_default_oneof_instance_ = new echoWaveOneofInstance();
  echoWaveRequest::default_instance_ = new echoWaveRequest();
  echoWaveResponse::default_instance_ = new echoWaveResponse();
  echoWave::default_instance_->InitAsDefaultInstance();
  echoWaveRequest::default_instance_->InitAsDefaultInstance();
  echoWaveResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_echoWave_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_echoWave_2eproto {
  StaticDescriptorInitializer_echoWave_2eproto() {
    protobuf_AddDesc_echoWave_2eproto();
  }
} static_descriptor_initializer_echoWave_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int echoWave::kRequestFieldNumber;
const int echoWave::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

echoWave::echoWave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:echoWave)
}

void echoWave::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  echoWave_default_oneof_instance_->request_ = const_cast< ::echoWaveRequest*>(&::echoWaveRequest::default_instance());
  echoWave_default_oneof_instance_->response_ = const_cast< ::echoWaveResponse*>(&::echoWaveResponse::default_instance());
}

echoWave::echoWave(const echoWave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echoWave)
}

void echoWave::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_message();
}

echoWave::~echoWave() {
  // @@protoc_insertion_point(destructor:echoWave)
  SharedDtor();
}

void echoWave::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
  if (this != default_instance_) {
  }
}

void echoWave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* echoWave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return echoWave_descriptor_;
}

const echoWave& echoWave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_echoWave_2eproto();
  return *default_instance_;
}

echoWave* echoWave::default_instance_ = NULL;

echoWave* echoWave::New(::google::protobuf::Arena* arena) const {
  echoWave* n = new echoWave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void echoWave::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:echoWave)
  switch(message_case()) {
    case kRequest: {
      delete message_.request_;
      break;
    }
    case kResponse: {
      delete message_.response_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void echoWave::Clear() {
// @@protoc_insertion_point(message_clear_start:echoWave)
  clear_message();
}

bool echoWave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echoWave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .echoWaveRequest request = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }

      // optional .echoWaveResponse response = 2;
      case 2: {
        if (tag == 18) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echoWave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echoWave)
  return false;
#undef DO_
}

void echoWave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echoWave)
  // optional .echoWaveRequest request = 1;
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *message_.request_, output);
  }

  // optional .echoWaveResponse response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *message_.response_, output);
  }

  // @@protoc_insertion_point(serialize_end:echoWave)
}

::google::protobuf::uint8* echoWave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:echoWave)
  // optional .echoWaveRequest request = 1;
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *message_.request_, false, target);
  }

  // optional .echoWaveResponse response = 2;
  if (has_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *message_.response_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echoWave)
  return target;
}

int echoWave::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:echoWave)
  int total_size = 0;

  switch (message_case()) {
    // optional .echoWaveRequest request = 1;
    case kRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.request_);
      break;
    }
    // optional .echoWaveResponse response = 2;
    case kResponse: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.response_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void echoWave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echoWave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const echoWave* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const echoWave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echoWave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echoWave)
    MergeFrom(*source);
  }
}

void echoWave::MergeFrom(const echoWave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echoWave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.message_case()) {
    case kRequest: {
      mutable_request()->::echoWaveRequest::MergeFrom(from.request());
      break;
    }
    case kResponse: {
      mutable_response()->::echoWaveResponse::MergeFrom(from.response());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void echoWave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echoWave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void echoWave::CopyFrom(const echoWave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echoWave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool echoWave::IsInitialized() const {

  return true;
}

void echoWave::Swap(echoWave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void echoWave::InternalSwap(echoWave* other) {
  std::swap(message_, other->message_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata echoWave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = echoWave_descriptor_;
  metadata.reflection = echoWave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// echoWave

// optional .echoWaveRequest request = 1;
bool echoWave::has_request() const {
  return message_case() == kRequest;
}
void echoWave::set_has_request() {
  _oneof_case_[0] = kRequest;
}
void echoWave::clear_request() {
  if (has_request()) {
    delete message_.request_;
    clear_has_message();
  }
}
 const ::echoWaveRequest& echoWave::request() const {
  // @@protoc_insertion_point(field_get:echoWave.request)
  return has_request()
      ? *message_.request_
      : ::echoWaveRequest::default_instance();
}
::echoWaveRequest* echoWave::mutable_request() {
  if (!has_request()) {
    clear_message();
    set_has_request();
    message_.request_ = new ::echoWaveRequest;
  }
  // @@protoc_insertion_point(field_mutable:echoWave.request)
  return message_.request_;
}
::echoWaveRequest* echoWave::release_request() {
  // @@protoc_insertion_point(field_release:echoWave.request)
  if (has_request()) {
    clear_has_message();
    ::echoWaveRequest* temp = message_.request_;
    message_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void echoWave::set_allocated_request(::echoWaveRequest* request) {
  clear_message();
  if (request) {
    set_has_request();
    message_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:echoWave.request)
}

// optional .echoWaveResponse response = 2;
bool echoWave::has_response() const {
  return message_case() == kResponse;
}
void echoWave::set_has_response() {
  _oneof_case_[0] = kResponse;
}
void echoWave::clear_response() {
  if (has_response()) {
    delete message_.response_;
    clear_has_message();
  }
}
 const ::echoWaveResponse& echoWave::response() const {
  // @@protoc_insertion_point(field_get:echoWave.response)
  return has_response()
      ? *message_.response_
      : ::echoWaveResponse::default_instance();
}
::echoWaveResponse* echoWave::mutable_response() {
  if (!has_response()) {
    clear_message();
    set_has_response();
    message_.response_ = new ::echoWaveResponse;
  }
  // @@protoc_insertion_point(field_mutable:echoWave.response)
  return message_.response_;
}
::echoWaveResponse* echoWave::release_response() {
  // @@protoc_insertion_point(field_release:echoWave.response)
  if (has_response()) {
    clear_has_message();
    ::echoWaveResponse* temp = message_.response_;
    message_.response_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void echoWave::set_allocated_response(::echoWaveResponse* response) {
  clear_message();
  if (response) {
    set_has_response();
    message_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:echoWave.response)
}

bool echoWave::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
void echoWave::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
echoWave::MessageCase echoWave::message_case() const {
  return echoWave::MessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int echoWaveRequest::kWaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

echoWaveRequest::echoWaveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:echoWaveRequest)
}

void echoWaveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

echoWaveRequest::echoWaveRequest(const echoWaveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echoWaveRequest)
}

void echoWaveRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  wave_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

echoWaveRequest::~echoWaveRequest() {
  // @@protoc_insertion_point(destructor:echoWaveRequest)
  SharedDtor();
}

void echoWaveRequest::SharedDtor() {
  wave_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void echoWaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* echoWaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return echoWaveRequest_descriptor_;
}

const echoWaveRequest& echoWaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_echoWave_2eproto();
  return *default_instance_;
}

echoWaveRequest* echoWaveRequest::default_instance_ = NULL;

echoWaveRequest* echoWaveRequest::New(::google::protobuf::Arena* arena) const {
  echoWaveRequest* n = new echoWaveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void echoWaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:echoWaveRequest)
  wave_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool echoWaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echoWaveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wave = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wave()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->wave().data(), this->wave().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echoWaveRequest.wave"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echoWaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echoWaveRequest)
  return false;
#undef DO_
}

void echoWaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echoWaveRequest)
  // optional string wave = 1;
  if (this->wave().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wave().data(), this->wave().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echoWaveRequest.wave");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->wave(), output);
  }

  // @@protoc_insertion_point(serialize_end:echoWaveRequest)
}

::google::protobuf::uint8* echoWaveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:echoWaveRequest)
  // optional string wave = 1;
  if (this->wave().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->wave().data(), this->wave().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echoWaveRequest.wave");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wave(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echoWaveRequest)
  return target;
}

int echoWaveRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:echoWaveRequest)
  int total_size = 0;

  // optional string wave = 1;
  if (this->wave().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->wave());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void echoWaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echoWaveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const echoWaveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const echoWaveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echoWaveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echoWaveRequest)
    MergeFrom(*source);
  }
}

void echoWaveRequest::MergeFrom(const echoWaveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echoWaveRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.wave().size() > 0) {

    wave_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.wave_);
  }
}

void echoWaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echoWaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void echoWaveRequest::CopyFrom(const echoWaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echoWaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool echoWaveRequest::IsInitialized() const {

  return true;
}

void echoWaveRequest::Swap(echoWaveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void echoWaveRequest::InternalSwap(echoWaveRequest* other) {
  wave_.Swap(&other->wave_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata echoWaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = echoWaveRequest_descriptor_;
  metadata.reflection = echoWaveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// echoWaveRequest

// optional string wave = 1;
void echoWaveRequest::clear_wave() {
  wave_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& echoWaveRequest::wave() const {
  // @@protoc_insertion_point(field_get:echoWaveRequest.wave)
  return wave_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void echoWaveRequest::set_wave(const ::std::string& value) {
  
  wave_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echoWaveRequest.wave)
}
 void echoWaveRequest::set_wave(const char* value) {
  
  wave_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echoWaveRequest.wave)
}
 void echoWaveRequest::set_wave(const char* value, size_t size) {
  
  wave_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echoWaveRequest.wave)
}
 ::std::string* echoWaveRequest::mutable_wave() {
  
  // @@protoc_insertion_point(field_mutable:echoWaveRequest.wave)
  return wave_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* echoWaveRequest::release_wave() {
  // @@protoc_insertion_point(field_release:echoWaveRequest.wave)
  
  return wave_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void echoWaveRequest::set_allocated_wave(::std::string* wave) {
  if (wave != NULL) {
    
  } else {
    
  }
  wave_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wave);
  // @@protoc_insertion_point(field_set_allocated:echoWaveRequest.wave)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int echoWaveResponse::kStatusFieldNumber;
const int echoWaveResponse::kEchoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

echoWaveResponse::echoWaveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:echoWaveResponse)
}

void echoWaveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

echoWaveResponse::echoWaveResponse(const echoWaveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:echoWaveResponse)
}

void echoWaveResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = false;
  echo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

echoWaveResponse::~echoWaveResponse() {
  // @@protoc_insertion_point(destructor:echoWaveResponse)
  SharedDtor();
}

void echoWaveResponse::SharedDtor() {
  echo_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void echoWaveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* echoWaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return echoWaveResponse_descriptor_;
}

const echoWaveResponse& echoWaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_echoWave_2eproto();
  return *default_instance_;
}

echoWaveResponse* echoWaveResponse::default_instance_ = NULL;

echoWaveResponse* echoWaveResponse::New(::google::protobuf::Arena* arena) const {
  echoWaveResponse* n = new echoWaveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void echoWaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:echoWaveResponse)
  status_ = false;
  echo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool echoWaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:echoWaveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_echo;
        break;
      }

      // optional string echo = 2;
      case 2: {
        if (tag == 18) {
         parse_echo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_echo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->echo().data(), this->echo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "echoWaveResponse.echo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:echoWaveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:echoWaveResponse)
  return false;
#undef DO_
}

void echoWaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:echoWaveResponse)
  // optional bool status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // optional string echo = 2;
  if (this->echo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->echo().data(), this->echo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echoWaveResponse.echo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->echo(), output);
  }

  // @@protoc_insertion_point(serialize_end:echoWaveResponse)
}

::google::protobuf::uint8* echoWaveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:echoWaveResponse)
  // optional bool status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // optional string echo = 2;
  if (this->echo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->echo().data(), this->echo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "echoWaveResponse.echo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->echo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:echoWaveResponse)
  return target;
}

int echoWaveResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:echoWaveResponse)
  int total_size = 0;

  // optional bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  // optional string echo = 2;
  if (this->echo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->echo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void echoWaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:echoWaveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const echoWaveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const echoWaveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:echoWaveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:echoWaveResponse)
    MergeFrom(*source);
  }
}

void echoWaveResponse::MergeFrom(const echoWaveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:echoWaveResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.echo().size() > 0) {

    echo_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.echo_);
  }
}

void echoWaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:echoWaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void echoWaveResponse::CopyFrom(const echoWaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:echoWaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool echoWaveResponse::IsInitialized() const {

  return true;
}

void echoWaveResponse::Swap(echoWaveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void echoWaveResponse::InternalSwap(echoWaveResponse* other) {
  std::swap(status_, other->status_);
  echo_.Swap(&other->echo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata echoWaveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = echoWaveResponse_descriptor_;
  metadata.reflection = echoWaveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// echoWaveResponse

// optional bool status = 1;
void echoWaveResponse::clear_status() {
  status_ = false;
}
 bool echoWaveResponse::status() const {
  // @@protoc_insertion_point(field_get:echoWaveResponse.status)
  return status_;
}
 void echoWaveResponse::set_status(bool value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:echoWaveResponse.status)
}

// optional string echo = 2;
void echoWaveResponse::clear_echo() {
  echo_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& echoWaveResponse::echo() const {
  // @@protoc_insertion_point(field_get:echoWaveResponse.echo)
  return echo_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void echoWaveResponse::set_echo(const ::std::string& value) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:echoWaveResponse.echo)
}
 void echoWaveResponse::set_echo(const char* value) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:echoWaveResponse.echo)
}
 void echoWaveResponse::set_echo(const char* value, size_t size) {
  
  echo_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:echoWaveResponse.echo)
}
 ::std::string* echoWaveResponse::mutable_echo() {
  
  // @@protoc_insertion_point(field_mutable:echoWaveResponse.echo)
  return echo_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* echoWaveResponse::release_echo() {
  // @@protoc_insertion_point(field_release:echoWaveResponse.echo)
  
  return echo_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void echoWaveResponse::set_allocated_echo(::std::string* echo) {
  if (echo != NULL) {
    
  } else {
    
  }
  echo_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), echo);
  // @@protoc_insertion_point(field_set_allocated:echoWaveResponse.echo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
